package kr.co.dstrust.dsl.service;

import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import redis.clients.jedis.Jedis;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import kr.co.dstrust.dsl.core.ApiRequestTemplate;
import kr.co.dstrust.dsl.core.KeyMaker;
import kr.co.dstrust.dsl.service.dao.TokenKey;

@Service("userIssue")
@Qualifier()
//@Qualifier("sqlSessionTemplate")
@Scope("prototype")
public class UserIssue extends ApiRequestTemplate {
    //@Autowired

    //@Resource(name="sqlSession")
    @Resource(name="sqlSession_gw")    
    private SqlSession sqlSession_gw;
    @Resource(name="sqlSession_dsl")    
    private SqlSession sqlSession_dsl;
    
    public UserIssue(Map<String, String> reqData) {
        super(reqData);
    }

    @Override
    public void requestParamValidation() throws RequestParamException {
        if (StringUtils.isEmpty(this.reqData.get("userGwId"))) {
            throw new RequestParamException("userGwId 이 없습니다.");
        }
        if (StringUtils.isEmpty(this.reqData.get("userPwd"))) {
            throw new RequestParamException("userPwd 이 없습니다.");
        }
        if (StringUtils.isEmpty(this.reqData.get("db_name"))) {
            throw new RequestParamException("db_name 이 없습니다.");
        }
    }

    @Override
    public void service() throws ServiceException {
        // 입력 email 사용자의 이메일을 HTTP header에 입력한다.
        // 출력 resultCode API 처리 결과코드를 돌려준다. API 처리 결과가 정상이면 결과코드는 200이다.
        // 출력 message API 처리 결과 메시지를 돌려준다. API의 처리결과가 정상일 때는 Success 메시지를 돌려주며
        // 나머지 정상이 아닐 때는 오류 메시지를 돌려준다.
        // 출력 userNo 입력된 이메일에 해당하는 사용자의 사용자 번호를 돌려준다.
        
        String db_name = this.reqData.get("db_name");
        SqlSession sqlSession = null;
        switch(db_name)
        {
        case "GW":
            sqlSession = sqlSession_gw;
            break;
        case "ERP":
//            sqlSession = sqlSession_erp;            
            break;
        case "QMS":
//            sqlSession = sqlSession_qms;
            break;
        case "MMS":
//            sqlSession = sqlSession_mms;
            break;
        case "DSL":
//            sqlSession = sqlSession_dsl;
            break;
        case "EIS":
//            sqlSession = sqlSession_eis;
            break;
        default :
            sqlSession = sqlSession_gw;
            break;
        }
        
        
        try {
        int result_value = -1;
        
        if(sqlSession!=null)
        {
            result_value = sqlSession.update("users.updateUserPwd", this.reqData);        

            if(result_value != -1)
            {   
                Map<String,Object> result_v = sqlSession_dsl.selectOne("accounts.userAccountVailidity", this.reqData);
                if(result_v==null)
                {
                    sqlSession_dsl.insert("accounts.insertPasswordChangedInfo",this.reqData);
                }
                else
                {
                    Set<String> keys = result_v.keySet();
                    
                    for(String key : keys)
                    {                        
                        if(key.equals("fail_count"))
                        {
                            String value = result_v.get(key).toString();
                            if( Integer.parseInt(value)< 4 )
                            {
                                sqlSession_dsl.update("accounts.updatePasswordChangedInfo",this.reqData);
                            }                            
                        }
                    }  
                }
                
                this.apiResult.addProperty("resultCode", "200");
                this.apiResult.addProperty("message", "Success");
                //this.apiResult.add("infos", workset);               
            }
            else 
            {
                // 데이터 없음.
                this.apiResult.addProperty("resultCode", "404");
            }   
        }
        else 
        {
            // 데이터 없음.
            this.apiResult.addProperty("resultCode", "404");
        }   
        }catch(Exception ex)
        {
            System.out.println("err:"+ex.toString());
        }
    }
    
}
